<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="1" name="pytest" skips="0" tests="9" time="17.592"><testcase classname="test_01_i2c_periph_base" file="test_01_i2c_periph_base.py" line="11" name="test_acquire_and_release_should_succeed" time="0.48670411109924316"><properties><property name="test_name" value="test_acquire_and_release_should_succeed"/><property name="i2c_get_id" value="{&apos;msg&apos;: &apos;[periph_i2c]&apos;, &apos;data&apos;: [&apos;periph_i2c&apos;], &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_get_id&apos;}"/><property name="i2c_acquire(0)" value="{&apos;msg&apos;: &apos;i2c_0 acquired&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_acquire(0)&apos;}"/><property name="i2c_release(0)" value="{&apos;msg&apos;: &apos;i2c_0 released&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_release(0)&apos;}"/></properties><system-out>test_name: test_acquire_and_release_should_succeed
{&apos;cmd&apos;: &apos;i2c_get_id&apos;,
 &apos;data&apos;: [&apos;periph_i2c&apos;],
 &apos;msg&apos;: &apos;[periph_i2c]&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_acquire(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 acquired&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_release(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 released&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
</system-out></testcase><testcase classname="test_01_i2c_periph_base" file="test_01_i2c_periph_base.py" line="17" name="test_acquire_after_release_should_succeed" time="0.29036521911621094"><properties><property name="test_name" value="test_acquire_after_release_should_succeed"/><property name="i2c_get_id" value="{&apos;msg&apos;: &apos;[periph_i2c]&apos;, &apos;data&apos;: [&apos;periph_i2c&apos;], &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_get_id&apos;}"/><property name="i2c_acquire(0)" value="{&apos;msg&apos;: &apos;i2c_0 acquired&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_acquire(0)&apos;}"/><property name="i2c_release(0)" value="{&apos;msg&apos;: &apos;i2c_0 released&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_release(0)&apos;}"/><property name="i2c_acquire(0)" value="{&apos;msg&apos;: &apos;i2c_0 acquired&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_acquire(0)&apos;}"/><property name="i2c_release(0)" value="{&apos;msg&apos;: &apos;i2c_0 released&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_release(0)&apos;}"/></properties><system-out>test_name: test_acquire_after_release_should_succeed
{&apos;cmd&apos;: &apos;i2c_get_id&apos;,
 &apos;data&apos;: [&apos;periph_i2c&apos;],
 &apos;msg&apos;: &apos;[periph_i2c]&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_acquire(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 acquired&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_release(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 released&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_acquire(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 acquired&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_release(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 released&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
</system-out></testcase><testcase classname="test_01_i2c_periph_base" file="test_01_i2c_periph_base.py" line="25" name="test_double_acquire_should_timeout" time="2.327300786972046"><properties><property name="test_name" value="test_double_acquire_should_timeout"/><property name="i2c_get_id" value="{&apos;msg&apos;: &apos;[periph_i2c]&apos;, &apos;data&apos;: [&apos;periph_i2c&apos;], &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_get_id&apos;}"/><property name="i2c_acquire(0)" value="{&apos;msg&apos;: &apos;i2c_0 acquired&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_acquire(0)&apos;}"/><property name="i2c_acquire(0)" value="{&apos;msg&apos;: &apos;i2c_acquire(0)\n&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Timeout&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_acquire(0)&apos;}"/><property name="i2c_release 0" value="{&apos;data&apos;: None, &apos;result&apos;: &apos;Timeout&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_release 0&apos;}"/></properties><system-out>test_name: test_double_acquire_should_timeout
{&apos;cmd&apos;: &apos;i2c_get_id&apos;,
 &apos;data&apos;: [&apos;periph_i2c&apos;],
 &apos;msg&apos;: &apos;[periph_i2c]&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_acquire(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 acquired&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_acquire(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_acquire(0)\n&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Timeout&apos;}
{&apos;cmd&apos;: &apos;i2c_release 0&apos;, &apos;data&apos;: None, &apos;node&apos;: &apos;dut&apos;, &apos;result&apos;: &apos;Timeout&apos;}
</system-out></testcase><testcase classname="test_01_i2c_periph_base" file="test_01_i2c_periph_base.py" line="31" name="test_read_register_should_succeed" time="0.28835368156433105"><properties><property name="test_name" value="test_read_register_should_succeed"/><property name="i2c_get_id" value="{&apos;msg&apos;: &apos;[periph_i2c]&apos;, &apos;data&apos;: [&apos;periph_i2c&apos;], &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_get_id&apos;}"/><property name="i2c_acquire(0)" value="{&apos;msg&apos;: &apos;i2c_0 acquired&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_acquire(0)&apos;}"/><property name="rr 152 1" value="{&apos;msg&apos;: &apos;cmd=user_reg.64 response=EOK-command success [0]&apos;, &apos;data&apos;: 0, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;phil&apos;, &apos;cmd&apos;: &apos;rr 152 1&apos;}"/><property name="i2c_read_reg(0, 0x55, 0x98, 0x00)" value="{&apos;msg&apos;: &apos;i2c_0 read 1 byte(s) from reg 0x98 : [0x00]&apos;, &apos;data&apos;: [0], &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_read_reg(0, 0x55, 0x98, 0x00)&apos;}"/><property name="i2c_release(0)" value="{&apos;msg&apos;: &apos;i2c_0 released&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_release(0)&apos;}"/></properties><system-out>test_name: test_read_register_should_succeed
{&apos;cmd&apos;: &apos;i2c_get_id&apos;,
 &apos;data&apos;: [&apos;periph_i2c&apos;],
 &apos;msg&apos;: &apos;[periph_i2c]&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_acquire(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 acquired&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;rr 152 1&apos;,
 &apos;data&apos;: 0,
 &apos;msg&apos;: &apos;cmd=user_reg.64 response=EOK-command success [0]&apos;,
 &apos;node&apos;: &apos;phil&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_read_reg(0, 0x55, 0x98, 0x00)&apos;,
 &apos;data&apos;: [0],
 &apos;msg&apos;: &apos;i2c_0 read 1 byte(s) from reg 0x98 : [0x00]&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_release(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 released&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
</system-out></testcase><testcase classname="test_01_i2c_periph_base" file="test_01_i2c_periph_base.py" line="41" name="test_read_register_after_NACK_should_succeed" time="0.31328487396240234"><properties><property name="test_name" value="test_read_register_after_NACK_should_succeed"/><property name="i2c_get_id" value="{&apos;msg&apos;: &apos;[periph_i2c]&apos;, &apos;data&apos;: [&apos;periph_i2c&apos;], &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_get_id&apos;}"/><property name="i2c_acquire(0)" value="{&apos;msg&apos;: &apos;i2c_0 acquired&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_acquire(0)&apos;}"/><property name="i2c_read_reg(0, 0x2a, 0x00, 0x00)" value="{&apos;msg&apos;: &apos;ENXIO [6]&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Error&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_read_reg(0, 0x2a, 0x00, 0x00)&apos;}"/><property name="rr 152 1" value="{&apos;msg&apos;: &apos;cmd=user_reg.64 response=EOK-command success [0]&apos;, &apos;data&apos;: 0, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;phil&apos;, &apos;cmd&apos;: &apos;rr 152 1&apos;}"/><property name="i2c_read_reg(0, 0x55, 0x98, 0x00)" value="{&apos;msg&apos;: &apos;ETIMEDOUT [116]&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Error&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_read_reg(0, 0x55, 0x98, 0x00)&apos;}"/><property name="i2c_release(0)" value="{&apos;msg&apos;: &apos;i2c_0 released&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_release(0)&apos;}"/></properties><failure message="AssertionError: assert &apos;Error&apos; == &apos;Success&apos;
  - Error
  + Success">nodes = {&apos;dut&apos;: &lt;periph_i2c_if.PeriphI2CIf object at 0x7fb8b4d250b8&gt;, &apos;phil&apos;: &lt;riot_pal.ll_mem_map_if.LLMemMapIf object at 0x7fb8b4d25be0&gt;}
cmd_collect = &lt;function cmd_collect.&lt;locals&gt;._collect at 0x7fb8b4d39c80&gt;

    def test_read_register_after_NACK_should_succeed(nodes, cmd_collect):
        &quot;&quot;&quot;Forces a NACK then reads a register to see if recovered&quot;&quot;&quot;
        res = cmd_collect(&apos;dut&apos;, nodes[&apos;dut&apos;].i2c_read_reg(0, 42, 0))
        assert res[&apos;result&apos;] == &apos;Error&apos;
        addr = nodes[&apos;phil&apos;].cmd_list[&apos;i2c.slave_addr_1&apos;][&apos;default&apos;]
        reg = nodes[&apos;phil&apos;].cmd_list[&apos;user_reg.64&apos;][&apos;offset&apos;]
        data = cmd_collect(&apos;phil&apos;, nodes[&apos;phil&apos;].read_reg(&apos;user_reg.64&apos;, size=1))
        res = cmd_collect(&apos;dut&apos;, nodes[&apos;dut&apos;].i2c_read_reg(0, addr, reg))
&gt;       assert res[&apos;result&apos;] == &apos;Success&apos;
E       AssertionError: assert &apos;Error&apos; == &apos;Success&apos;
E         - Error
E         + Success

test_01_i2c_periph_base.py:50: AssertionError</failure><system-out>test_name: test_read_register_after_NACK_should_succeed
{&apos;cmd&apos;: &apos;i2c_get_id&apos;,
 &apos;data&apos;: [&apos;periph_i2c&apos;],
 &apos;msg&apos;: &apos;[periph_i2c]&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_acquire(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 acquired&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_read_reg(0, 0x2a, 0x00, 0x00)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;ENXIO [6]&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Error&apos;}
{&apos;cmd&apos;: &apos;rr 152 1&apos;,
 &apos;data&apos;: 0,
 &apos;msg&apos;: &apos;cmd=user_reg.64 response=EOK-command success [0]&apos;,
 &apos;node&apos;: &apos;phil&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_read_reg(0, 0x55, 0x98, 0x00)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;ETIMEDOUT [116]&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Error&apos;}
{&apos;cmd&apos;: &apos;i2c_release(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 released&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
</system-out></testcase><testcase classname="test_02_i2c_write_register" file="test_02_i2c_write_register.py" line="11" name="test_write_registers[write_data0]" time="4.395246267318726"><properties><property name="test_name" value="test_write_registers[write_data0]"/><property name="i2c_get_id" value="{&apos;data&apos;: None, &apos;result&apos;: &apos;Timeout&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_get_id&apos;}"/><property name="i2c_get_id" value="{&apos;data&apos;: None, &apos;result&apos;: &apos;Timeout&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_get_id&apos;}"/><property name="i2c_get_id" value="{&apos;msg&apos;: &apos;[periph_i2c]&apos;, &apos;data&apos;: [&apos;periph_i2c&apos;], &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_get_id&apos;}"/><property name="i2c_acquire(0)" value="{&apos;msg&apos;: &apos;i2c_0 acquired&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_acquire(0)&apos;}"/><property name="i2c_write_regs(0, 0x55, 0x98, 0x00, [0x29])" value="{&apos;msg&apos;: &apos;i2c_0 wrote 1 bytes to reg 0x98&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_write_regs(0, 0x55, 0x98, 0x00, [0x29])&apos;}"/><property name="rr 152 64" value="{&apos;msg&apos;: &apos;cmd=user_reg.64 response=EOK-command success [0]&apos;, &apos;data&apos;: [41, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;phil&apos;, &apos;cmd&apos;: &apos;rr 152 64&apos;}"/><property name="i2c_release(0)" value="{&apos;msg&apos;: &apos;i2c_0 released&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_release(0)&apos;}"/></properties><system-out>test_name: test_write_registers[write_data0]
{&apos;cmd&apos;: &apos;i2c_get_id&apos;, &apos;data&apos;: None, &apos;node&apos;: &apos;dut&apos;, &apos;result&apos;: &apos;Timeout&apos;}
{&apos;cmd&apos;: &apos;i2c_get_id&apos;, &apos;data&apos;: None, &apos;node&apos;: &apos;dut&apos;, &apos;result&apos;: &apos;Timeout&apos;}
{&apos;cmd&apos;: &apos;i2c_get_id&apos;,
 &apos;data&apos;: [&apos;periph_i2c&apos;],
 &apos;msg&apos;: &apos;[periph_i2c]&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_acquire(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 acquired&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_write_regs(0, 0x55, 0x98, 0x00, [0x29])&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 wrote 1 bytes to reg 0x98&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;rr 152 64&apos;,
 &apos;data&apos;: [41,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63],
 &apos;msg&apos;: &apos;cmd=user_reg.64 response=EOK-command success [0]&apos;,
 &apos;node&apos;: &apos;phil&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_release(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 released&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
</system-out></testcase><testcase classname="test_02_i2c_write_register" file="test_02_i2c_write_register.py" line="11" name="test_write_registers[write_data1]" time="4.396816730499268"><properties><property name="test_name" value="test_write_registers[write_data1]"/><property name="i2c_get_id" value="{&apos;data&apos;: None, &apos;result&apos;: &apos;Timeout&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_get_id&apos;}"/><property name="i2c_get_id" value="{&apos;data&apos;: None, &apos;result&apos;: &apos;Timeout&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_get_id&apos;}"/><property name="i2c_get_id" value="{&apos;msg&apos;: &apos;[periph_i2c]&apos;, &apos;data&apos;: [&apos;periph_i2c&apos;], &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_get_id&apos;}"/><property name="i2c_acquire(0)" value="{&apos;msg&apos;: &apos;i2c_0 acquired&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_acquire(0)&apos;}"/><property name="i2c_write_regs(0, 0x55, 0x98, 0x00, [0x2a, 0x2b])" value="{&apos;msg&apos;: &apos;i2c_0 wrote 2 bytes to reg 0x98&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_write_regs(0, 0x55, 0x98, 0x00, [0x2a, 0x2b])&apos;}"/><property name="rr 152 64" value="{&apos;msg&apos;: &apos;cmd=user_reg.64 response=EOK-command success [0]&apos;, &apos;data&apos;: [42, 43, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;phil&apos;, &apos;cmd&apos;: &apos;rr 152 64&apos;}"/><property name="i2c_release(0)" value="{&apos;msg&apos;: &apos;i2c_0 released&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_release(0)&apos;}"/></properties><system-out>test_name: test_write_registers[write_data1]
{&apos;cmd&apos;: &apos;i2c_get_id&apos;, &apos;data&apos;: None, &apos;node&apos;: &apos;dut&apos;, &apos;result&apos;: &apos;Timeout&apos;}
{&apos;cmd&apos;: &apos;i2c_get_id&apos;, &apos;data&apos;: None, &apos;node&apos;: &apos;dut&apos;, &apos;result&apos;: &apos;Timeout&apos;}
{&apos;cmd&apos;: &apos;i2c_get_id&apos;,
 &apos;data&apos;: [&apos;periph_i2c&apos;],
 &apos;msg&apos;: &apos;[periph_i2c]&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_acquire(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 acquired&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_write_regs(0, 0x55, 0x98, 0x00, [0x2a, 0x2b])&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 wrote 2 bytes to reg 0x98&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;rr 152 64&apos;,
 &apos;data&apos;: [42,
          43,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63],
 &apos;msg&apos;: &apos;cmd=user_reg.64 response=EOK-command success [0]&apos;,
 &apos;node&apos;: &apos;phil&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_release(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 released&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
</system-out></testcase><testcase classname="test_02_i2c_write_register" file="test_02_i2c_write_register.py" line="11" name="test_write_registers[write_data2]" time="0.30225658416748047"><properties><property name="test_name" value="test_write_registers[write_data2]"/><property name="i2c_get_id" value="{&apos;msg&apos;: &apos;[periph_i2c]&apos;, &apos;data&apos;: [&apos;periph_i2c&apos;], &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_get_id&apos;}"/><property name="i2c_acquire(0)" value="{&apos;msg&apos;: &apos;i2c_0 acquired&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_acquire(0)&apos;}"/><property name="i2c_write_regs(0, 0x55, 0x98, 0x00, [0x2c, 0x2d, 0x2e])" value="{&apos;msg&apos;: &apos;i2c_0 wrote 3 bytes to reg 0x98&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_write_regs(0, 0x55, 0x98, 0x00, [0x2c, 0x2d, 0x2e])&apos;}"/><property name="rr 152 64" value="{&apos;msg&apos;: &apos;cmd=user_reg.64 response=EOK-command success [0]&apos;, &apos;data&apos;: [44, 45, 46, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;phil&apos;, &apos;cmd&apos;: &apos;rr 152 64&apos;}"/><property name="i2c_release(0)" value="{&apos;msg&apos;: &apos;i2c_0 released&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_release(0)&apos;}"/></properties><system-out>test_name: test_write_registers[write_data2]
{&apos;cmd&apos;: &apos;i2c_get_id&apos;,
 &apos;data&apos;: [&apos;periph_i2c&apos;],
 &apos;msg&apos;: &apos;[periph_i2c]&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_acquire(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 acquired&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_write_regs(0, 0x55, 0x98, 0x00, [0x2c, 0x2d, 0x2e])&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 wrote 3 bytes to reg 0x98&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;rr 152 64&apos;,
 &apos;data&apos;: [44,
          45,
          46,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63],
 &apos;msg&apos;: &apos;cmd=user_reg.64 response=EOK-command success [0]&apos;,
 &apos;node&apos;: &apos;phil&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_release(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 released&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
</system-out></testcase><testcase classname="test_02_i2c_write_register" file="test_02_i2c_write_register.py" line="11" name="test_write_registers[write_data3]" time="4.701842308044434"><properties><property name="test_name" value="test_write_registers[write_data3]"/><property name="i2c_get_id" value="{&apos;data&apos;: None, &apos;result&apos;: &apos;Timeout&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_get_id&apos;}"/><property name="i2c_get_id" value="{&apos;data&apos;: None, &apos;result&apos;: &apos;Timeout&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_get_id&apos;}"/><property name="i2c_get_id" value="{&apos;msg&apos;: &apos;[periph_i2c]&apos;, &apos;data&apos;: [&apos;periph_i2c&apos;], &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_get_id&apos;}"/><property name="i2c_acquire(0)" value="{&apos;msg&apos;: &apos;i2c_0 acquired&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_acquire(0)&apos;}"/><property name="i2c_write_regs(0, 0x55, 0x98, 0x00, [0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38])" value="{&apos;msg&apos;: &apos;i2c_0 wrote 10 bytes to reg 0x98&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_write_regs(0, 0x55, 0x98, 0x00, [0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38])&apos;}"/><property name="rr 152 64" value="{&apos;msg&apos;: &apos;cmd=user_reg.64 response=EOK-command success [0]&apos;, &apos;data&apos;: [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;phil&apos;, &apos;cmd&apos;: &apos;rr 152 64&apos;}"/><property name="i2c_release(0)" value="{&apos;msg&apos;: &apos;i2c_0 released&apos;, &apos;data&apos;: None, &apos;result&apos;: &apos;Success&apos;, &apos;node&apos;: &apos;dut&apos;, &apos;cmd&apos;: &apos;i2c_release(0)&apos;}"/></properties><system-out>test_name: test_write_registers[write_data3]
{&apos;cmd&apos;: &apos;i2c_get_id&apos;, &apos;data&apos;: None, &apos;node&apos;: &apos;dut&apos;, &apos;result&apos;: &apos;Timeout&apos;}
{&apos;cmd&apos;: &apos;i2c_get_id&apos;, &apos;data&apos;: None, &apos;node&apos;: &apos;dut&apos;, &apos;result&apos;: &apos;Timeout&apos;}
{&apos;cmd&apos;: &apos;i2c_get_id&apos;,
 &apos;data&apos;: [&apos;periph_i2c&apos;],
 &apos;msg&apos;: &apos;[periph_i2c]&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_acquire(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 acquired&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_write_regs(0, 0x55, 0x98, 0x00, [0x2f, 0x30, 0x31, 0x32, 0x33, &apos;
        &apos;0x34, 0x35, 0x36, 0x37, 0x38])&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 wrote 10 bytes to reg 0x98&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;rr 152 64&apos;,
 &apos;data&apos;: [47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63],
 &apos;msg&apos;: &apos;cmd=user_reg.64 response=EOK-command success [0]&apos;,
 &apos;node&apos;: &apos;phil&apos;,
 &apos;result&apos;: &apos;Success&apos;}
{&apos;cmd&apos;: &apos;i2c_release(0)&apos;,
 &apos;data&apos;: None,
 &apos;msg&apos;: &apos;i2c_0 released&apos;,
 &apos;node&apos;: &apos;dut&apos;,
 &apos;result&apos;: &apos;Success&apos;}
</system-out></testcase></testsuite>